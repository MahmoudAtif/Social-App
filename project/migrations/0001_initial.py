# Generated by Django 4.2 on 2023-05-06 21:26

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import project.users.managers.custom_user_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=50, unique=True, verbose_name='Email Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users_user',
            },
            managers=[
                ('objects', project.users.managers.custom_user_manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SendEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_type', models.CharField(choices=[('RESET_PASSWORD', 'Reset Password'), ('EMAIL_VERIFICATION', 'Email Verification'), ('REGULAR_EMAIL', 'Regular Email')], default='EMAIL_VERIFICATION', max_length=20, verbose_name='Email Type')),
                ('email', models.EmailField(max_length=250, verbose_name='Email Address')),
                ('subject', models.CharField(blank=True, max_length=100, null=True, verbose_name='Subject')),
                ('message', models.TextField(blank=True, max_length=200, null=True, verbose_name='Message')),
            ],
            options={
                'verbose_name': 'Send Email',
                'verbose_name_plural': 'Send Emails',
                'db_table': 'auth_send_email',
            },
        ),
        migrations.CreateModel(
            name='SecretToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(blank=True, db_index=True, max_length=100, verbose_name='Key')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expires At')),
                ('lifetime', models.BooleanField(default=False)),
                ('token_type', models.CharField(choices=[('RESET_PASSWORD', 'Reset Password'), ('EMAIL_VERIFICATION', 'Email Verification')], default='RESET_PASSWORD', max_length=20, verbose_name='Token Type')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Secret Token',
                'verbose_name_plural': 'Secret Tokens',
                'db_table': 'auth_secret_token',
            },
        ),
    ]
